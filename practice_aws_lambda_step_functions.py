# -*- coding: utf-8 -*-
"""Practice - AWS Lambda/Step Functions

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14G63UZM5OPq9jI9WjP3QCuW9Hf1nWq7w
"""

import json
from datetime import datetime
import requests

# -- setup
URL = 'https://api.bcb.gov.br/dados/serie/bcdata.sgs.4392/dados?formato=json'

# -- extract
try:
    response = requests.get(URL)
    response.raise_for_status()
except requests.exceptions.RequestException as exc:
    raise SystemExit(exc)
else:
    data = json.loads(response.text)

# -- transform
transformed_data = []

for record in data:
    transformed_record = {
        'taxa': record['valor'].replace(',', '.'),
        'dataTaxa': datetime.strptime(record['data'], '%d/%m/%Y').strftime('%Y-%m-%d'),
    }
    transformed_data.append(transformed_record)

# Convert data to CSV format
csv_data = '\n'.join([','.join([record['taxa'], record['dataTaxa']]) for record in transformed_data])

example_record = transformed_data[0]
print(f"taxa: {example_record['taxa']}, dataTaxa: {example_record['dataTaxa']}")

with open('transformed_data.csv', 'w') as f:
    f.write('taxa,dataTaxa\n')
    f.write(csv_data)

print('CSV file saved successfully.')

"""- Criar um *bucket* no AWS [S3](https://aws.amazon.com/pt/s3/) para salvar o dado original (`bronze`);
- Criar uma função AWS [Lambda](https://aws.amazon.com/pt/lambda/) para extrair o dado original;
- Criar um *bucket* no AWS [S3](https://aws.amazon.com/pt/s3/) para salvar o dado transformado  (`silver`);
- Criar uma função AWS [Lambda](https://aws.amazon.com/pt/lambda/) para transformar o dado original;
- Criar uma função AWS [Lambda](https://aws.amazon.com/pt/lambda/) para criar uma tabela no AWS [Athena](https://aws.amazon.com/pt/athena) apontando para o *bucket* do dado transformado.

AWS [Lambda](https://aws.amazon.com/pt/lambda/) para *bucket* **bronze**:
"""

import json
import logging
from datetime import datetime

import boto3
import urllib3
from botocore.exceptions import ClientError


def lambda_handler(event, context) -> bool:

  # -- setup

  URL = 'https://api.bcb.gov.br/dados/serie/bcdata.sgs.4392/dados?formato=json'
  BRONZE_BUCKET = 'modulo-39-ebac-bronze'

  client = boto3.client('s3')

  date = datetime.now().strftime('%Y-%m-%d')
  filename_json = f'stock-exchange-{date}.json'

  # -- extract

  try:
    http = urllib3.PoolManager()
    response = http.request(url=URL, method='get')
  except Exception as exc:
    raise exc
  else:
    data = json.loads(response.data.decode())
    logging.info(msg=data)

  # -- transform

  ...

  # -- load

  try:
      with open(f'/tmp/{filename_json}', mode='w', encoding='utf8') as fp:
          json.dump(data, fp)
      client.upload_file(Filename=f'/tmp/{filename_json}', Bucket=BRONZE_BUCKET, Key=filename_json)
  except ClientError as exc:
      raise exc

  return json.dumps(dict(status=True))

"""AWS [Lambda](https://aws.amazon.com/pt/lambda/) para *bucket* **silver**:"""

import json
from datetime import datetime

import boto3
from botocore.exceptions import ClientError


def lambda_handler(event, context) -> bool:
    # -- setup
    BRONZE_BUCKET = 'modulo-39-ebac-bronze'
    SILVER_BUCKET = 'modulo-39-ebac-silver'

    client = boto3.client('s3')

    date = datetime.now().strftime('%Y-%m-%d')
    filename_csv = f'stock-exchange-{date}.csv'
    filename_json = f'stock-exchange-{date}.json'

    # -- extract
    client.download_file(BRONZE_BUCKET, filename_json, f'/tmp/{filename_json}')

    with open(f"/tmp/{filename_json}", mode='r', encoding='utf8') as fp:
        data = json.load(fp)

    # -- transform
    transformed_data = []

    for record in data:
        transformed_record = {
            'taxa': record['valor'].replace(',', '.'),
            'dataTaxa': datetime.strptime(record['data'], '%d/%m/%Y').strftime('%Y-%m-%d'),
        }
        transformed_data.append(transformed_record)

    # -- load
    try:
        with open(f'/tmp/{filename_csv}', mode='w', encoding='utf8') as fp:
            fp.write('taxa,dataTaxa\n')
            for record in transformed_data:
                fp.write(f"{record['taxa']},{record['dataTaxa']}\n")
        client.upload_file(Filename=f'/tmp/{filename_csv}', Bucket=SILVER_BUCKET, Key=f'data_referencia={date}/{filename_csv}')
    except ClientError as exc:
        raise exc

    return json.dumps(dict(status=True))

"""AWS [Lambda](https://aws.amazon.com/pt/lambda/) para tabela:"""

import json
from datetime import datetime

import boto3
from botocore.exceptions import ClientError


def lambda_handler(event, context) -> bool:

  # -- setup

  SILVER_BUCKET = 'modulo-39-ebac-silver'

  query = f"""
  CREATE EXTERNAL TABLE IF NOT EXISTS cdi (
    taxa double,
    dataTaxa string
  )
  PARTITIONED BY (
    data_referencia string
  )
  ROW FORMAT SERDE 'org.apache.hadoop.hive.serde2.OpenCSVSerde'
  WITH SERDEPROPERTIES ('separatorChar'=',')
  LOCATION 's3://{SILVER_BUCKET}/'
  """

  client = boto3.client('athena')

  # -- create

  try:
    client.start_query_execution(
      QueryString=query,
      ResultConfiguration={'OutputLocation': 's3://modulo-38-ebac-athena-results/'}
    )
  except ClientError as exc:
    raise exc

  # -- update

  try:
    client.start_query_execution(
      QueryString='MSCK REPAIR TABLE cdi',
      ResultConfiguration={'OutputLocation': 's3://modulo-38-ebac-athena-results/'}
    )
  except ClientError as exc:
    raise exc

  return json.dumps(dict(status=True))

https://github.com/italofvaz/AWS_Lambda_StepFunctions.git



import os

username = "italofvaz" # insira o seu nome de usuário do git
os.environ["GITHUB_USER"] = username

!git config --global user.name "${GITHUB_USER}"

from getpass import getpass

usermail = getpass()
os.environ["GITHUB_MAIL"] = usermail

!git config --global user.email "${GITHUB_MAIL}"

usertoken = getpass()
os.environ["GITHUB_TOKEN"] = usertoken

!git clone https://${GITHUB_USER}:${GITHUB_TOKEN}@github.com/italofvaz/EDA-Credit_project.git

# Commented out IPython magic to ensure Python compatibility.
# %cd /content/EDA-Credit_project/

!git add .

!git commit -m "subindo codigo do colab"

!git push origin main